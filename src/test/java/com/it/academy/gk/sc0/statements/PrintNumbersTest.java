package com.it.academy.gk.sc0.statements;

import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * This class contains unit tests for the PrintNumbers class.
 */
class PrintNumbersTest {
    /**
     * An instance of the PrintNumbers class, used to test its methods.
     */
    private PrintNumbers printNumbers;

    /**
     * This method provides test cases for the testGenerateNumbersTask1 method.
     * Each test case consists of three arguments: the start value, the end value, and the expected result.
     * The expected result is a string representing the numbers that should be generated
     * by the generateNumbersTask1 method.
     */
    @Contract(pure = true)
    static @NotNull Stream<Object[]> generateNumbersTask1Provider() {
        return Stream.of(
                new Object[]{1, 7, "1 2 3 4 5 6 7 "},
                new Object[]{0, 0, "0 "},
                new Object[]{-3, 3, "-3 -2 -1 0 1 2 3 "}
        );
    }

    /**
     * This method provides test cases for the testGenerateNumbersTask2 method.
     * Each test case consists of four arguments: the first value, the last value, the increment value,
     * and the expected result. The expected result is a string representing
     * the numbers that should be generated by the generateNumbersTask2 method.
     */
    @Contract(pure = true)
    static @NotNull Stream<Object[]> generateNumbersTask2Provider() {
        return Stream.of(
                new Object[]{100, 10, -10, "100 90 80 70 60 50 40 30 20 10 "},
                new Object[]{100, 100, -10, "100 "},
                new Object[]{-30, -70, -10, "-30 -40 -50 -60 -70 "}
        );
    }

    /**
     * This method provides test cases for the testPrintNumbersTask4 method.
     * Each test case consists of three arguments: the upper bound, the lower bound, and the expected result.
     * The expected result is a string representing the numbers that should be printed by the printNumbersTask4 method.
     */
    @Contract(pure = true)
    static @NotNull Stream<Object[]> printNumbersTask4Provider() {
        return Stream.of(
                new Object[]{3, -3, "3 2 1 0 -1 -2 -3 "},
                new Object[]{0, 0, "0 "},
                new Object[]{-3, 3, ""}
        );
    }

    /**
     * This method provides test cases for the testPrintNumbersTask1 method.
     * Each test case consists of three arguments: the minimum value, the maximum value, and the expected result.
     * The expected result is a string representing the numbers that should be printed by the printNumbersTask1 method.
     */
    @Contract(pure = true)
    static @NotNull Stream<Object[]> printNumbersTask1Provider() {
        return Stream.of(
                new Object[]{1, 5, "1 2 3 4 5 "},
                new Object[]{5, 5, "5 "},
                new Object[]{-5, -1, "-5 -4 -3 -2 -1 "}
        );
    }

    /**
     * This method provides test cases for the testPrintNumbersTask2 method.
     * Each test case consists of three arguments: the beginning value, the finish value, and the expected result.
     * The expected result is a string representing the numbers that should be printed by the printNumbersTask2 method.
     */
    @Contract(pure = true)
    static @NotNull Stream<Object[]> printNumbersTask2Provider() {
        return Stream.of(
                new Object[]{5, 1, "5 4 3 2 1 "},
                new Object[]{5, 5, "5 "},
                new Object[]{-5, -9, "-5 -6 -7 -8 -9 "}
        );
    }

    /**
     * This method is run before each test method, ensuring that each test has a fresh instance
     * of the PrintNumbers class to work with.
     */
    @BeforeEach
    void setUp() {
        printNumbers = new PrintNumbers();
    }

    /**
     * This method tests the generateNumbersTask1 method of the PrintNumbers class.
     * It takes three arguments: the start value, the end value, and the expected result.
     * The expected result is a string representing the numbers that should be generated
     * by the generateNumbersTask1 method. The method calls the generateNumbersTask1 method
     * with the specified start and end values and compares the result to the expected result.
     */
    @ParameterizedTest(name = "generateNumbersTask1({0}, {1}) = {2}")
    @MethodSource("generateNumbersTask1Provider")
    @DisplayName("Test generateNumbersTask1 method")
    void testGenerateNumbersTask1(int start, int end, String expected) {
        var actual = printNumbers.generateNumbersTask1(start, end);

        assertEquals(expected, actual);
    }

    /**
     * This method tests the generateNumbersTask2 method of the PrintNumbers class.
     * It takes four arguments: the first value, the last value, the increment value, and the expected result.
     * The expected result is a string representing the numbers that should be generated
     * by the generateNumbersTask2 method. The method calls the generateNumbersTask2 method with
     * the specified first value, last value and increment value and compares
     * the result to the expected result.
     */
    @ParameterizedTest(name = "generateNumbersTask2({0}, {1}, {2}) = {3}")
    @MethodSource("generateNumbersTask2Provider")
    @DisplayName("Test generateNumbersTask2 method")
    void testGenerateNumbersTask2(int first, int last, int increment, String expected) {
        var actual = printNumbers.generateNumbersTask2(first, last, increment);

        assertEquals(expected, actual);
    }

    /**
     * This method tests the printNumbersTask4 method of the PrintNumbers class.
     * It takes three arguments: the upper bound, the lower bound, and the expected result.
     * The expected result is a string representing the numbers that should be printed by the printNumbersTask4 method.
     * The method calls the printNumbersTask4 method with the specified upper and lower bounds
     * and compares the result to the expected result.
     */
    @ParameterizedTest(name = "PrintNumbersTask4({0}, {1}) = {2}")
    @MethodSource("printNumbersTask4Provider")
    @DisplayName("Test printNumbersTask4 method")
    void testPrintNumbersTask4(int upperBound, int lowerBound, String expected) {
        var actual = printNumbers.printNumbersTask4(upperBound, lowerBound);

        assertEquals(expected, actual);
    }

    /**
     * This method tests the printNumbersTask1 method of the PrintNumbers class.
     * It takes three arguments: the minimum value, the maximum value, and the expected result.
     * The expected result is a string representing the numbers that should be printed by the printNumbersTask1 method.
     * The method calls the printNumbersTask1 method with the specified minimum and maximum values and compares
     * the result to the expected result.
     */
    @ParameterizedTest(name = "printNumbersTask1({0}, {1}) = {2}")
    @MethodSource("printNumbersTask1Provider")
    @DisplayName("Test printNumbersTask1 method")
    void testPrintNumbersTask1(int minValue, int maxValue,
                               String expected) {
        var actual = printNumbers.printNumbersTask1(minValue, maxValue);

        assertEquals(expected, actual);
    }

    /**
     * This method tests the printNumbersTask2 method of the PrintNumbers class.
     * It takes three arguments: the beginning value, the finish value, and the expected result.
     * The expected result is a string representing the numbers that should be printed by the printNumbersTask2 method.
     * The method calls the printNumbersTask2 method with the specified beginning and finish values and compares
     * the result to the expected result.
     */
    @ParameterizedTest(name = "printNumbersTask2({0}, {1}) = {2}")
    @MethodSource("printNumbersTask2Provider")
    @DisplayName("Test printNumbersTask2 method")
    void testPrintNumbersTask2(int begin, int finish,
                               String expected) {
        var actual = printNumbers.printNumbersTask2(begin, finish);

        assertEquals(expected, actual);
    }
}
